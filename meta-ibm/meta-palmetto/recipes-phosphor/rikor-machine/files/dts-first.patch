diff --git a/arch/arm/boot/dts/aspeed-bmc-opp-palmetto.dts b/arch/arm/boot/dts/aspeed-bmc-opp-palmetto.dts
index 2f2cb0e..1cd4f10 100644
--- a/arch/arm/boot/dts/aspeed-bmc-opp-palmetto.dts
+++ b/arch/arm/boot/dts/aspeed-bmc-opp-palmetto.dts
@@ -42,15 +42,15 @@
 		compatible = "gpio-leds";
 
 		heartbeat {
-			gpios = <&gpio ASPEED_GPIO(R, 4) GPIO_ACTIVE_LOW>;
+			gpios = <&gpio ASPEED_GPIO(Q, 7) GPIO_ACTIVE_LOW>;
 		};
 
 		power {
-			gpios = <&gpio ASPEED_GPIO(R, 5) GPIO_ACTIVE_LOW>;
+			gpios = <&gpio ASPEED_GPIO(Q, 4) GPIO_ACTIVE_LOW>;
 		};
 
 		identify {
-			gpios = <&gpio ASPEED_GPIO(A, 2) GPIO_ACTIVE_LOW>;
+			gpios = <&gpio ASPEED_GPIO(D, 6) GPIO_ACTIVE_LOW>;
 		};
 	};
 
@@ -143,17 +143,6 @@
 
 &i2c0 {
 	status = "okay";
-
-	eeprom@50 {
-		compatible = "atmel,24c256";
-		reg = <0x50>;
-		pagesize = <64>;
-	};
-
-	rtc@68 {
-		compatible = "dallas,ds3231";
-		reg = <0x68>;
-	};
 };
 
 &i2c1 {
@@ -163,19 +152,22 @@
 &i2c2 {
 	status = "okay";
 
-	tmp423@4c {
-		compatible = "ti,tmp423";
-		reg = <0x4c>;
-	};
 };
 
 &i2c3 {
 	status = "okay";
+	eeprom@56 {
+		compatible = "atmel,24c02";
+		reg = <0x56>;
+		pagesize = <64>;
+	};
 
-	occ-hwmon@50 {
-		compatible = "ibm,p8-occ-hwmon";
-		reg = <0x50>;
+/*
+	rtc@68 {
+		compatible = "dallas,ds3231";
+		reg = <0x68>;
 	};
+*/
 };
 
 &i2c4 {
@@ -183,15 +175,36 @@
 };
 
 &i2c5 {
-	status = "okay";
+	status = "disabled";
 };
 
 &i2c6 {
 	status = "okay";
+
+	tmp75@49 {
+		compatible = "ti,lm75";
+		reg = <0x49>;
+	};
+	tmp75@4e {
+		compatible = "ti,lm75";
+		reg = <0x4e>;
+	};
+	tmp75@4c {
+		compatible = "ti,lm75";
+		reg = <0x4c>;
+	};
+	tmp75@4b {
+		compatible = "ti,lm75";
+		reg = <0x4b>;
+	};
+	tmp421@4f {
+		compatible = "ti,tmp421";
+		reg = <0x4f>;
+	};
 };
 
 &i2c7 {
-	status = "okay";
+	status = "disabled";
 };
 
 &vuart {
@@ -213,6 +226,7 @@
 };
 
 &gpio {
+/*
 	pin_func_mode0 {
 		gpio-hog;
 		gpios = <ASPEED_GPIO(C, 4) GPIO_ACTIVE_HIGH>;
@@ -352,6 +366,7 @@
 		output-high;
 		line-name = "BMC_TPM_INT_N";
 	};
+*/
 };
 
 &fsi {
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index 5ea1bed..9f77f2d 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -2381,6 +2381,7 @@ static int do_setlink(const struct sk_buff *skb,
 {
 	const struct net_device_ops *ops = dev->netdev_ops;
 	int err;
+	int trace = 0;
 
 	err = validate_linkmsg(dev, tb);
 	if (err < 0)
@@ -2389,6 +2390,7 @@ static int do_setlink(const struct sk_buff *skb,
 	if (tb[IFLA_NET_NS_PID] || tb[IFLA_NET_NS_FD] || tb[IFLA_TARGET_NETNSID]) {
 		struct net *net = rtnl_link_get_net_capable(skb, dev_net(dev),
 							    tb, CAP_NET_ADMIN);
+		trace = 1;
 		if (IS_ERR(net)) {
 			err = PTR_ERR(net);
 			goto errout;
@@ -2396,6 +2398,7 @@ static int do_setlink(const struct sk_buff *skb,
 
 		err = dev_change_net_namespace(dev, net, ifname);
 		put_net(net);
+		trace = 2;
 		if (err)
 			goto errout;
 		status |= DO_SETLINK_MODIFIED;
@@ -2407,11 +2410,13 @@ static int do_setlink(const struct sk_buff *skb,
 
 		if (!ops->ndo_set_config) {
 			err = -EOPNOTSUPP;
+			trace = 3;
 			goto errout;
 		}
 
 		if (!netif_device_present(dev)) {
 			err = -ENODEV;
+			trace = 4;
 			goto errout;
 		}
 
@@ -2424,6 +2429,7 @@ static int do_setlink(const struct sk_buff *skb,
 		k_map.port = (unsigned char) u_map->port;
 
 		err = ops->ndo_set_config(dev, &k_map);
+		trace = 5;
 		if (err < 0)
 			goto errout;
 
@@ -2439,6 +2445,7 @@ static int do_setlink(const struct sk_buff *skb,
 		sa = kmalloc(len, GFP_KERNEL);
 		if (!sa) {
 			err = -ENOMEM;
+			trace = 6;
 			goto errout;
 		}
 		sa->sa_family = dev->type;
@@ -2446,6 +2453,7 @@ static int do_setlink(const struct sk_buff *skb,
 		       dev->addr_len);
 		err = dev_set_mac_address(dev, sa, extack);
 		kfree(sa);
+		trace = 7;
 		if (err)
 			goto errout;
 		status |= DO_SETLINK_MODIFIED;
@@ -2453,6 +2461,7 @@ static int do_setlink(const struct sk_buff *skb,
 
 	if (tb[IFLA_MTU]) {
 		err = dev_set_mtu_ext(dev, nla_get_u32(tb[IFLA_MTU]), extack);
+		trace = 8;
 		if (err < 0)
 			goto errout;
 		status |= DO_SETLINK_MODIFIED;
@@ -2470,6 +2479,7 @@ static int do_setlink(const struct sk_buff *skb,
 	 */
 	if (ifm->ifi_index > 0 && ifname[0]) {
 		err = dev_change_name(dev, ifname);
+		trace = 9;
 		if (err < 0)
 			goto errout;
 		status |= DO_SETLINK_MODIFIED;
@@ -2478,6 +2488,7 @@ static int do_setlink(const struct sk_buff *skb,
 	if (tb[IFLA_IFALIAS]) {
 		err = dev_set_alias(dev, nla_data(tb[IFLA_IFALIAS]),
 				    nla_len(tb[IFLA_IFALIAS]));
+		trace = 10;
 		if (err < 0)
 			goto errout;
 		status |= DO_SETLINK_NOTIFY;
@@ -2491,12 +2502,14 @@ static int do_setlink(const struct sk_buff *skb,
 	if (ifm->ifi_flags || ifm->ifi_change) {
 		err = dev_change_flags(dev, rtnl_dev_combine_flags(dev, ifm),
 				       extack);
+		trace = 11;
 		if (err < 0)
 			goto errout;
 	}
 
 	if (tb[IFLA_MASTER]) {
 		err = do_set_master(dev, nla_get_u32(tb[IFLA_MASTER]), extack);
+		trace = 12;
 		if (err)
 			goto errout;
 		status |= DO_SETLINK_MODIFIED;
@@ -2504,6 +2517,7 @@ static int do_setlink(const struct sk_buff *skb,
 
 	if (tb[IFLA_CARRIER]) {
 		err = dev_change_carrier(dev, nla_get_u8(tb[IFLA_CARRIER]));
+		trace = 13;
 		if (err)
 			goto errout;
 		status |= DO_SETLINK_MODIFIED;
@@ -2513,6 +2527,7 @@ static int do_setlink(const struct sk_buff *skb,
 		unsigned int value = nla_get_u32(tb[IFLA_TXQLEN]);
 
 		err = dev_change_tx_queue_len(dev, value);
+		trace = 14;
 		if (err)
 			goto errout;
 		status |= DO_SETLINK_MODIFIED;
@@ -2523,6 +2538,7 @@ static int do_setlink(const struct sk_buff *skb,
 
 		if (max_size > GSO_MAX_SIZE) {
 			err = -EINVAL;
+			trace = 15;
 			goto errout;
 		}
 
@@ -2537,6 +2553,7 @@ static int do_setlink(const struct sk_buff *skb,
 
 		if (max_segs > GSO_MAX_SEGS) {
 			err = -EINVAL;
+			trace = 16;
 			goto errout;
 		}
 
@@ -2568,13 +2585,16 @@ static int do_setlink(const struct sk_buff *skb,
 			if (nla_type(attr) != IFLA_VF_INFO ||
 			    nla_len(attr) < NLA_HDRLEN) {
 				err = -EINVAL;
+				trace = 17;
 				goto errout;
 			}
 			err = nla_parse_nested(vfinfo, IFLA_VF_MAX, attr,
 					       ifla_vf_policy, NULL);
+			trace = 18;
 			if (err < 0)
 				goto errout;
 			err = do_setvfinfo(dev, vfinfo);
+			trace = 19;
 			if (err < 0)
 				goto errout;
 			status |= DO_SETLINK_NOTIFY;
@@ -2589,6 +2609,7 @@ static int do_setlink(const struct sk_buff *skb,
 		int rem;
 
 		err = -EOPNOTSUPP;
+		trace = 20;
 		if (!ops->ndo_set_vf_port)
 			goto errout;
 
@@ -2596,18 +2617,22 @@ static int do_setlink(const struct sk_buff *skb,
 			if (nla_type(attr) != IFLA_VF_PORT ||
 			    nla_len(attr) < NLA_HDRLEN) {
 				err = -EINVAL;
+				trace = 21;
 				goto errout;
 			}
 			err = nla_parse_nested(port, IFLA_PORT_MAX, attr,
 					       ifla_port_policy, NULL);
+			trace = 22;
 			if (err < 0)
 				goto errout;
 			if (!port[IFLA_PORT_VF]) {
 				err = -EOPNOTSUPP;
+				trace = 23;
 				goto errout;
 			}
 			vf = nla_get_u32(port[IFLA_PORT_VF]);
 			err = ops->ndo_set_vf_port(dev, vf, port);
+			trace = 24;
 			if (err < 0)
 				goto errout;
 			status |= DO_SETLINK_NOTIFY;
@@ -2621,12 +2646,14 @@ static int do_setlink(const struct sk_buff *skb,
 		err = nla_parse_nested(port, IFLA_PORT_MAX,
 				       tb[IFLA_PORT_SELF], ifla_port_policy,
 				       NULL);
+		trace = 25;
 		if (err < 0)
 			goto errout;
 
 		err = -EOPNOTSUPP;
 		if (ops->ndo_set_vf_port)
 			err = ops->ndo_set_vf_port(dev, PORT_SELF_VF, port);
+		trace = 26;
 		if (err < 0)
 			goto errout;
 		status |= DO_SETLINK_NOTIFY;
@@ -2646,6 +2673,7 @@ static int do_setlink(const struct sk_buff *skb,
 			err = af_ops->set_link_af(dev, af);
 			if (err < 0) {
 				rcu_read_unlock();
+				trace = 27;
 				goto errout;
 			}
 
@@ -2658,6 +2686,7 @@ static int do_setlink(const struct sk_buff *skb,
 	if (tb[IFLA_PROTO_DOWN]) {
 		err = dev_change_proto_down(dev,
 					    nla_get_u8(tb[IFLA_PROTO_DOWN]));
+		trace = 28;
 		if (err)
 			goto errout;
 		status |= DO_SETLINK_NOTIFY;
@@ -2669,11 +2698,13 @@ static int do_setlink(const struct sk_buff *skb,
 
 		err = nla_parse_nested(xdp, IFLA_XDP_MAX, tb[IFLA_XDP],
 				       ifla_xdp_policy, NULL);
+		trace = 29;
 		if (err < 0)
 			goto errout;
 
 		if (xdp[IFLA_XDP_ATTACHED] || xdp[IFLA_XDP_PROG_ID]) {
 			err = -EINVAL;
+			trace = 30;
 			goto errout;
 		}
 
@@ -2681,10 +2712,12 @@ static int do_setlink(const struct sk_buff *skb,
 			xdp_flags = nla_get_u32(xdp[IFLA_XDP_FLAGS]);
 			if (xdp_flags & ~XDP_FLAGS_MASK) {
 				err = -EINVAL;
+				trace = 31;
 				goto errout;
 			}
 			if (hweight32(xdp_flags & XDP_FLAGS_MODES) > 1) {
 				err = -EINVAL;
+				trace = 32;
 				goto errout;
 			}
 		}
@@ -2693,6 +2726,7 @@ static int do_setlink(const struct sk_buff *skb,
 			err = dev_change_xdp_fd(dev, extack,
 						nla_get_s32(xdp[IFLA_XDP_FD]),
 						xdp_flags);
+			trace = 33;
 			if (err)
 				goto errout;
 			status |= DO_SETLINK_NOTIFY;
@@ -2704,9 +2738,11 @@ static int do_setlink(const struct sk_buff *skb,
 		if ((status & DO_SETLINK_NOTIFY) == DO_SETLINK_NOTIFY)
 			netdev_state_change(dev);
 
-		if (err < 0)
+		if (err < 0) {
 			net_warn_ratelimited("A link change request failed with some changes committed already. Interface %s may have been left with an inconsistent configuration, please check.\n",
 					     dev->name);
+			net_warn_ratelimited("Trace %d.\n", trace);
+		}
 	}
 
 	return err;
