/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __RIKFAN_MANAGER_H__
#define __RIKFAN_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.rikor.ares.rikfan */

#define TYPE_RIKFAN (rikfan_get_type ())
#define RIKFAN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_RIKFAN, Rikfan))
#define IS_RIKFAN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_RIKFAN))
#define RIKFAN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_RIKFAN, RikfanIface))

struct _Rikfan;
typedef struct _Rikfan Rikfan;
typedef struct _RikfanIface RikfanIface;

struct _RikfanIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_fan_mode) (
    Rikfan *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_greeting);

  gboolean (*handle_hello_world) (
    Rikfan *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_greeting);

  const gchar * (*get_mode_test) (Rikfan *object);

};

GType rikfan_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *rikfan_interface_info (void);
guint rikfan_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void rikfan_complete_hello_world (
    Rikfan *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);

void rikfan_complete_fan_mode (
    Rikfan *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus method calls: */
void rikfan_call_hello_world (
    Rikfan *proxy,
    const gchar *arg_greeting,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean rikfan_call_hello_world_finish (
    Rikfan *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean rikfan_call_hello_world_sync (
    Rikfan *proxy,
    const gchar *arg_greeting,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);

void rikfan_call_fan_mode (
    Rikfan *proxy,
    const gchar *arg_greeting,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean rikfan_call_fan_mode_finish (
    Rikfan *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean rikfan_call_fan_mode_sync (
    Rikfan *proxy,
    const gchar *arg_greeting,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *rikfan_get_mode_test (Rikfan *object);
gchar *rikfan_dup_mode_test (Rikfan *object);
void rikfan_set_mode_test (Rikfan *object, const gchar *value);


/* ---- */

#define TYPE_RIKFAN_PROXY (rikfan_proxy_get_type ())
#define RIKFAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_RIKFAN_PROXY, RikfanProxy))
#define RIKFAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_RIKFAN_PROXY, RikfanProxyClass))
#define RIKFAN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_RIKFAN_PROXY, RikfanProxyClass))
#define IS_RIKFAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_RIKFAN_PROXY))
#define IS_RIKFAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_RIKFAN_PROXY))

typedef struct _RikfanProxy RikfanProxy;
typedef struct _RikfanProxyClass RikfanProxyClass;
typedef struct _RikfanProxyPrivate RikfanProxyPrivate;

struct _RikfanProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RikfanProxyPrivate *priv;
};

struct _RikfanProxyClass
{
  GDBusProxyClass parent_class;
};

GType rikfan_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RikfanProxy, g_object_unref)
#endif

void rikfan_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Rikfan *rikfan_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Rikfan *rikfan_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void rikfan_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Rikfan *rikfan_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Rikfan *rikfan_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_RIKFAN_SKELETON (rikfan_skeleton_get_type ())
#define RIKFAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_RIKFAN_SKELETON, RikfanSkeleton))
#define RIKFAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_RIKFAN_SKELETON, RikfanSkeletonClass))
#define RIKFAN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_RIKFAN_SKELETON, RikfanSkeletonClass))
#define IS_RIKFAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_RIKFAN_SKELETON))
#define IS_RIKFAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_RIKFAN_SKELETON))

typedef struct _RikfanSkeleton RikfanSkeleton;
typedef struct _RikfanSkeletonClass RikfanSkeletonClass;
typedef struct _RikfanSkeletonPrivate RikfanSkeletonPrivate;

struct _RikfanSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RikfanSkeletonPrivate *priv;
};

struct _RikfanSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType rikfan_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RikfanSkeleton, g_object_unref)
#endif

Rikfan *rikfan_skeleton_new (void);


G_END_DECLS

#endif /* __RIKFAN_MANAGER_H__ */
